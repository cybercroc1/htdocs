<?php
function phones_conv($src_phone) { //в качестве параметра принимает НЕ ПУСТУЮ строку с номерами телефонов в любом виде
//возвращает массив с нормализованными номерами:
//$result_phones[$i]['phone'] - нормализованный номер телефона или исходный номер, если не удалось нормализовать
//$result_phones[$i]['ext'] - хвост номера после символа "#"
//$result_phones[$i]['err'] - "y", если не удалось нормализовать номер телефона
			
	$result_string='';
	$result_phones=array(); //в этот массив пишем результат
	
	$delim_src=array("\n","	",";"); //разделители телефонов: перевод строки, табул, тз
	
	$src_phone=str_replace($delim_src,",",$src_phone); //оставляем один разделитель телефонов - ","

	$phones=explode(",",$src_phone); //делаем массив с номерами, разделяя по запятым			
	$i=0;
	//echo "<hr>2. Конвертация<br>";	
	foreach ($phones as $phone) { //перебираем массив с номерами
		//echo "conv('".$phone."')<br>";

        $phone_and_ext=explode("#",$phone,2); //разделяем на номер и все, что после первой решетки (если она есть)

		$result_phone=conv($phone_and_ext[0]); //над каждым номером выполняем функцию конвертирования
		//echo "+".$result_phone."+";
		
		if($result_phone<>'') { //если конвертор вернул не пустое значение, значит номер нормальный
			//echo "не пустой<br>";
			$result_phones[$i]['phone']=$result_phone; //записываем результат в результирующий массив
			isset($phone_and_ext[1])?$result_phones[$i]['ext']=trim($phone_and_ext[1]):$result_phones[$i]['ext']=''; //кусок после решетки будет добавочным			
			$result_phones[$i]['err']='';
			$i++;
		}	
		else if($phone<>'') { //если конвертер вернул пустое значение, тогда записываем ошибку
			//echo "пустой<br>";
			$result_phones[$i]['phone']=$phone;
			$result_phones[$i]['ext']='';
			$result_phones[$i]['err']='y';
		}	
	}
	return $result_phones; //возвращаем массив с номерами
}
function conv($src_phone) { //функция конвертирования номеров, принимает один номер, записанный в любом виде
	//регулярное выражение
	$rgx="/(\D*
 (
   (((8([ ()_{}\[\]\-]|(&nbsp;))*1([ ()_{}\[\]\-]|(&nbsp;))*0([ ()_{}\[\]\-]|(&nbsp;))*)|\+)
    (\d([ ()_{}\[\]\-]|(&nbsp;))*){6,10}
   )
   |
   ([1-69]([ ()_{}\[\]\-]|(&nbsp;))*(\d([ ()_{}\[\]\-]|(&nbsp;))*){5}){1}
   |
   (\d([ ()_{}\[\]\-]|(&nbsp;))*(\d([ ()_{}\[\]\-]|(&nbsp;))*){6}){1}
   |   
   ([78]([ ()_{}\[\]\-]|(&nbsp;))*(\d([ ()_{}\[\]\-]|(&nbsp;))*){5}){1}
   |
   ((\d([ ()_{}\[\]\-]|(&nbsp;))*){5}){1}
   |
   (([1-79]([ ()_{}\[\]\-]|(&nbsp;))*){1}(\d([ ()_{}\[\]\-]|(&nbsp;))*){1})
 )
 (\d([ )_{}\[\]\-]|(&nbsp;))*){4,}
|
(\[(([ )_{}\-]|(&nbsp;))*\d([ )_{}\-]|(&nbsp;))*){4,6}\])
)(\D*)
/ix";
	if(preg_match($rgx,$src_phone,$found)) { //если номер подходит под любую из масок регулярнки, то зписываем его в массив $found (интересует только первый найденный)
		//echo "found:".$found[0]."<br>";

		$res=preg_replace('/[\D]/','',$found[0]); //удаляем все не цифры

		if(substr($res,0,1)=='4' and strlen($res)==11) {return $res;} //кодированные номера

		if(strlen($res)==7) {$res='8495'.$res;} //если номер из 7 цифр, то добавляем 8495 
		elseif(substr($res,0,1)=='7' and strlen($res)=='11') {$res="8".substr($res,1);} // если 1-я цифра 7, а длина номера 11, то заменяем 7 на 8
		elseif(substr($res,0,4)=="8107") {$res="8".substr($res,4);} //если номер начинается с 8-10-7, то это российский номер, заменяем 810 на 8
		elseif(strlen($res)==10) {$res="8".$res;} //если 10 цифр, то добавляем 8
		elseif(strlen($res)>=11 and substr($res,0,1)<>"8" and substr($res,0,1)<>"7") {$res="810".$res;} //если болше 11 цифр и не начинается с 8 или с 7, то добавляем 810
		
		 //echo "result:".$res."<br>--<br>";
		//замена устаревших кодов городов (по информации с сайта МТТ)
		if(strlen($res)==11 and substr($res,0,2)=='80') {
			if(substr($res,0,4)=='8011') $res='8401'.substr($res,4);
			elseif(substr($res,0,4)=='8097') $res='8997'.substr($res,4);
			elseif(substr($res,0,2)=='80') $res='84'.substr($res,2);
		}
		//Проверка на возможность набора номера. Если после всех манипуляций номер имеет нормальный вид, то функция возвращает его, иначе возвращает пустое значение.
		if(preg_match("/^((8(([2-9]\d)|(1[1-9]))\d{8})|(810[1-68-9]\d{10,14}))$/",$res)) return $res; // else return '';
	}
} 
?>